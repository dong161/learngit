<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://java.sun.com/xml/ns/javaee"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
	version="3.0">
	<display-name>train-basic-project</display-name>
	
	<!-- Web容器加载顺序ServletContext ~ context~param  ~ listener  ~ filter ~ servlet --> 
	

  	<!-- ///////////////////////////////////////////////////////////////////////////////////////////// -->
	<!-- //////////////////////////////// 欢迎页面 //////////////////////////////////////////////////// -->
	<!-- ///////////////////////////////////////////////////////////////////////////////////////////// -->
	<!-- 这里我们将使用SpringMVC提供的 mvc:view~controller 标签,实现了首页隐藏的目的,详见spring~mvc.xml 
	<welcome-file-list>
		<welcome-file>login.html</welcome-file>
	</welcome-file-list>
	-->
	<context-param>
		<param-name>webAppRootKey</param-name>
		<param-value>train-basic-project</param-value>
	</context-param>  	
  	
  	<!-- ///////////////////////////////////////////////////////////////////////////////////////////// -->
	<!-- ////////////////////////////// 统一编码 Filter /////////////////////////////////////////////// -->
	<!-- ///////////////////////////////////////////////////////////////////////////////////////////// -->
    <!-- forceEncoding默认为false,此时效果可大致理解为request.setCharacterEncoding("UTF-8") -->  
    <!-- forceEncoding=true后,可大致理解为request.setCharacterEncoding("UTF-8")和response.setCharacterEncoding("UTF-8") -->
	<filter>
		<filter-name>encodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>utf-8</param-value>
		</init-param>
		<init-param>
			<param-name>forceEncoding</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>encodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
		<dispatcher>REQUEST</dispatcher>
		<dispatcher>FORWARD</dispatcher>		
	</filter-mapping>

 	<!-- ///////////////////////////////////////////////////////////////////////////////////////////// -->
	<!-- //////////////////////////////// 内存泄漏  /////////////////////////////////////////////////// -->
	<!-- ///////////////////////////////////////////////////////////////////////////////////////////// -->	
    <!-- 防止发生java.beans.Introspector内存泄露,应将它配置在ContextLoaderListener的前面 -->  
    <!-- 详细描述见http://jadyer.cn/2013/09/24/spring-introspector-cleanup-listener/ -->
	<listener>
		<listener-class>org.springframework.web.util.IntrospectorCleanupListener</listener-class>
	</listener>	
	
  	<!-- ///////////////////////////////////////////////////////////////////////////////////////////// -->
	<!-- //////////////////////////////// Spring父容器 //////////////////////////////////////////////// -->
	<!-- ///////////////////////////////////////////////////////////////////////////////////////////// -->
    <!-- 应用启动时,该监听器被执行,它会读取Spring相关配置文件,其默认会到WEB-INF中查找applicationContext.xml -->  
    <!-- http://starscream.iteye.com/blog/1107036 -->  
    <!-- http://www.davenkin.me/post/2012-10-18/40039948363 -->  
    <!-- WebApplicationContextUtils.getWebApplicationContext() -->  	
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>classpath:spring-config.xml</param-value>
	</context-param>

  	<!-- ///////////////////////////////////////////////////////////////////////////////////////////// -->
	<!-- //////////////////////////////// Spring子容器 //////////////////////////////////////////////// -->
	<!-- ///////////////////////////////////////////////////////////////////////////////////////////// -->
	<!-- SpringMVC核心分发器 -->  
	<servlet>
		<servlet-name>springMvc</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>classpath:spring-mvc.xml</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
	</servlet>
	<servlet-mapping>
		<servlet-name>springMvc</servlet-name>
		<url-pattern>/</url-pattern>
	</servlet-mapping>
	
  	<!-- ///////////////////////////////////////////////////////////////////////////////////////////// -->
	<!-- //////////////////////////////// Session超时   /////////////////////////////////////////////// -->
	<!-- ///////////////////////////////////////////////////////////////////////////////////////////// -->	
    <!-- Session超时30分钟(零或负数表示会话永不超时) -->  
    <!--   
    <session-config>  
        <session-timeout>30</session-timeout>  
    </session-config>  
     -->	

  	<!-- ///////////////////////////////////////////////////////////////////////////////////////////// -->
	<!-- //////////////////////////////// 错误页面   /////////////////////////////////////////////////// -->
	<!-- ///////////////////////////////////////////////////////////////////////////////////////////// -->
<!--	
	<error-page>
		<error-code>405</error-code>
		<location>/WEB-INF/405.html</location>
	</error-page>
	<error-page>
		<error-code>404</error-code>
		<location>/WEB-INF/404.jsp</location>
	</error-page>

	<error-page>
		<error-code>500</error-code>
		<location>/WEB-INF/500.jsp</location>
	</error-page>
	<error-page>
		<exception-type>java.lang.Throwable</exception-type>
		<location>/WEB-INF/500.jsp</location>
	</error-page>
-->	

  	<!-- ///////////////////////////////////////////////////////////////////////////////////////////// -->
	<!-- ////////////////////////////// 特殊业务规则 Filter /////////////////////////////////////////// -->
	<!-- ///////////////////////////////////////////////////////////////////////////////////////////// -->	
<!-- 通 过EnvironmentLoaderListener 来创建相应的WebEnvironment ， 并自动绑定到 
		ServletContext，默认使用IniWebEnvironment实现。  
	<context-param>
		<param-name>shiroEnvironmentClass</param-name>
		<param-value>org.apache.shiro.web.env.IniWebEnvironment</param-value>
	</context-param>
	<context-param>
		<param-name>shiroConfigLocations</param-name>
		<param-value>classpath:shiro.ini</param-value>
	</context-param>

	<listener>
		<listener-class>org.apache.shiro.web.env.EnvironmentLoaderListener</listener-class>
	</listener>
-->

	<!-- 与Spring集成 ; 与spring-session的关系，参见《 Spring源码研究之Spring-Session.md 》 -->
	<!-- 配置Shiro过滤器,先让Shiro过滤系统接收到的请求 -->  
    <!-- 这里filter-name必须对应spring.xml中定义的<bean id="shiroFilter"/> -->  
    <!-- 使用[/*]匹配所有请求,保证所有的可控请求都经过Shiro的过滤 -->  
    <!-- 通常会将此filter-mapping放置到最前面(即其他filter-mapping前面),以保证它是过滤器链中第一个起作用的 -->
<!-- 参见 ShiroInitializer类 -->	
	<filter>
		<filter-name>shiroFilter</filter-name>
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
		<init-param>
			 <!-- 该值缺省为false,表示生命周期由SpringApplicationContext管理,设置为true则表示由ServletContainer管理   -->	
			<param-name>targetFilterLifecycle</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>shiroFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>	

<!--
	<filter>
		<filter-name>LoginFilter</filter-name>
		<filter-class>com.kanq.web.filter.LoginFilter</filter-class>
		<init-param>
			 不需要进行跳转的页面,即 白名单(whiteList)  
			<param-name>whiteList</param-name>
			<param-value>
				/login.html;
				/login/login.do;
			</param-value>
		</init-param>
		<init-param>
			  白名单ServiceId  
			<param-name>whiteServiceIdList</param-name>
			<param-value>
			</param-value>
		</init-param>		
		
	</filter>
	<filter-mapping>
		<filter-name>LoginFilter</filter-name>
		<url-pattern>*.html</url-pattern>
		<url-pattern>*.do</url-pattern>
	</filter-mapping>

	<filter>
		<filter-name>userInfoFilter</filter-name>
		<filter-class>com.kanq.web.filter.UserInfoFilter</filter-class>
		<init-param>
			 不需要进行跳转的页面,即 白名单(whiteList)
			<param-name>whiteList</param-name>
			<param-value>
				/login.html;
				/login/login.do;
			</param-value>
		</init-param>
		<init-param>
			 白名单ServiceId  
			<param-name>whiteServiceIdList</param-name>
			<param-value>
			</param-value>
		</init-param>		
	</filter>
	<filter-mapping>
		<filter-name>userInfoFilter</filter-name>
		<url-pattern>*.html</url-pattern>
		<url-pattern>*.do</url-pattern>
	</filter-mapping>
-->
</web-app>