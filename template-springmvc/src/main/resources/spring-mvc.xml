<?xml version="1.0" encoding="UTF-8"?>
<!-- 查找最新的schemaLocation 访问 http://www.springframework.org/schema/ -->
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/aop   
        http://www.springframework.org/schema/aop/spring-aop-4.0.xsd   
        http://www.springframework.org/schema/beans   
        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd   
        http://www.springframework.org/schema/context   
        http://www.springframework.org/schema/context/spring-context-4.0.xsd   
        http://www.springframework.org/schema/mvc   
        http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd   
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx-4.0.xsd">

	<!-- https://blog.csdn.net/jadyer/article/details/12208847 -->

	<!-- /////////////////////////////////////////////////////////////////////////////////// -->
	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	<!-- /////////////////////////////////////////////////////////////////////////////////// -->
	
	<!-- ///////////////////////////////////////////////////////////////////////////////////////////// -->
	<!-- /////////////////////////////////////// 配置信息   ///////////////////////////////////////////  -->
	<!-- ///////////////////////////////////////////////////////////////////////////////////////////// -->
	<context:property-placeholder
		location="classpath:db.properties,classpath:common-global.properties" />	

	<!-- 对Controller层进行AOP ;;; 开启AOP监听 只对当前配置文件有效 -->	
	<!-- <import resource="spring-mvc-shiro.xml"/> -->
	
	<!-- 默认访问跳转到登录页面(即定义无需Controller的url<->view直接映射)  -->
	<!-- 对应WEB-INF目录下面的JSP页面，我们知道是不能直接使用URL访问到。需要通过转发的方式，而我们一般都是在控制器中做转发映射，
		  对应一些我们不需要其他操作的JSP页面，我们可以使用 mvc:view-controller path="" 来配置，这样就可以不用再控制器中再去做转发映射 
		 path:指的是请求的路径; view-name:返回的视图名字（视图解释器 配置的文件目录的名字）		  
	-->
	<!-- 由ViewControllerBeanDefinitionParser负责解析该节点; 会向容器中注册ParameterizableViewController -->
	<mvc:view-controller path="/" view-name="forward:${upms.loginUrl}" />

	
	<!-- ///////////////////////////////////////////////////////////////////////////////////////////// -->
	<!-- ///////////////////// 静态资源文件，不会被Spring MVC拦截; 注意这里说的是静态 /////////////////// -->
	<!-- 由于web.xml中设置是：由SpringMVC拦截所有请求,于是在读取静态资源文件的时候就会受到影响(说白了就是读不到) -->	
	<!-- ///////////////////////////////////////////////////////////////////////////////////////////// -->
	<!-- 这个order必须比0大,因为负责处理Controller里请求的RequestMappingHandlerMapping的order正是0 -->
	<mvc:resources mapping="/**" location="/" order="5">
		<!-- 
			<mvc:resource-chain resource-cache="false"> 
				<mvc:resolvers> 
					<bean  class="com.kanq.qd.extend.springmvc.CustomResourceResolver">
					</bean> 
				</mvc:resolvers> 
			</mvc:resource-chain>
		 -->
	</mvc:resources>
	

	<!-- ///////////////////////////////////////////////////////////////////////////////////////////// -->
	<!-- //////////////////////////////////////////// 只扫Controller组件 ////////////////////////////// -->
	<!-- ///////////////////////////////////////////////////////////////////////////////////////////// -->
	<context:component-scan base-package="com.kanq.train.controller"
		use-default-filters="false">
		<context:include-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />	
	</context:component-scan>

	<!-- ///////////////////////////////////////////////////////////////////////////////////////////// -->
	<!-- ////////////////////////默认的视图解析器 在上边的解析错误时使用 (默认使用html) /////////////////- -->
	<!-- ///////////////////////////////////////////////////////////////////////////////////////////// -->
	<bean id="defaultViewResolver"
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<!-- <property name="viewClass" value="org.springframework.web.servlet.view.JstlView" 
			/> -->
		<property name="contentType" value="text/html" />
		<property name="prefix" value="/" />
		<property name="suffix" value=".html" />
	</bean>

	<!-- ///////////////////////////////////////////////////////////////////////////////////////////// -->
	<!-- ///////////////////////////// 上传文件时需要用到的分解器，默认将编码转为utf-8 ///////////////// -->
	<!-- ///////////////////////////////////////////////////////////////////////////////////////////// -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="defaultEncoding" value="utf-8" />
		<property name="maxUploadSize" value="104857600" />
		<property name="maxInMemorySize" value="4096" />
	</bean>

	<!-- SpringMVC在超出上传文件限制时，会抛出org.springframework.web.multipart.MaxUploadSizeExceededException -->
	<!-- 该异常是SpringMVC在检查上传的文件信息时抛出来的，而且此时还没有进入到Controller方法中 -->
	<bean
		class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
		<property name="exceptionMappings">
			<props>
				<!-- 遇到MaxUploadSizeExceededException异常时，自动跳转到/WEB-INF/error_fileupload.jsp页面 -->
				<prop
					key="org.springframework.web.multipart.MaxUploadSizeExceededException">WEB-INF/error_fileupload</prop>
				<!-- 处理其它异常(包括Controller抛出的) <prop key="java.lang.Throwable">WEB-INF/500</prop> -->
			</props>
		</property>
	</bean>

	<!-- ///////////////////////////////////////////////////////////////////////////////////////////// -->
	<!-- ////////////////////////////////////// 启用MVC注解 /////////////////////////////////////////// -->
	<!-- ///////////////////////////////////////////////////////////////////////////////////////////// -->
	<mvc:annotation-driven>
		<!-- 利用FastJson接口返回json数据相关配置; 取代默认的Jackson2 -->
		<!-- 关于原理,参见博客: http://blog.csdn.net/lqzkcx3/article/details/78584358 -->
		<!-- offcie site: https://github.com/alibaba/fastjson/wiki/%E5%9C%A8-Spring-%E4%B8%AD%E9%9B%86%E6%88%90-Fastjson -->
		<mvc:message-converters register-defaults="true">
			<!-- http://blog.csdn.net/kernel_32/article/details/50792139 下载的文件内容乱码 -->
			<bean
				class="org.springframework.http.converter.ByteArrayHttpMessageConverter" />
			<!-- 配置Fastjson支持 -->
			<bean
				class="com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter">
				<property name="supportedMediaTypes">
					<list>
						<value>text/html;charset=UTF-8</value>
						<value>application/json</value>
					</list>
				</property>
				<property name="features">
				<!-- 
					关于features属性,不是serializerFeature,而是features,详见FastJsonHttpMessageConverter.java  
					      它是用来控制json序列化输出时的一些额外属性,比如说该字段是否输出、输出时key使用单引号还是双引号、key不使用任何引号等等  
					      QuoteFieldNames 			输出key时是否使用双引号,默认为true  
					      WriteMapNullValue			是否输出值为null的字段,默认为false  
					      WriteNullNumberAsZero		数值字段如果为null,输出为0,而非null  
					      WriteNullListAsEmpty		List字段如果为null,输出为[],而非null  
					      WriteNullStringAsEmpty	字符类型字段如果为null,输出为"",而非null  
					      WriteNullBooleanAsFalse	Boolean字段如果为null,输出为false,而非null  
					    6)通常在网上搜到的fastjson和springMVC整合的例子中都像下面注释的代码那样给了两个属性WriteMapNullValue和QuoteFieldNames  
					      这就表示为json解析器设置QuoteFieldNames和WriteMapNullValue的值为true,即输出时key使用双引号,同时也输出值为null的字段  
					    7)输出时某字段为String类型,且值为null,此时若需要其输出,且输出值为空字符串,则需同时赋值WriteMapNullValue和WriteNullStringAsEmpty  
					      经测试,若只赋值WriteNullStringAsEmpty,则不会输出该字段..加上WriteMapNullValue属性后,便输出了,且输出值不是null,而是预期的空字符串  								
				 -->
					<list>
						<value>WriteMapNullValue</value>
						<value>QuoteFieldNames</value>
						<value>DisableCircularReferenceDetect</value>
					</list>
				</property>
			</bean>
		</mvc:message-converters>
<!-- ctroller层方法参数解析
		<mvc:argument-resolvers>
			<bean
				class="com.kanq.qd.extend.springmvc.bind.method.CurrentUserMethodArgumentResolver" />
		</mvc:argument-resolvers>
-->		
	</mvc:annotation-driven>

	<!-- ///////////////////////////////////////////////////////////////////////////////////////////// -->
	<!-- ////////////////////////////////////// Controller层AOP ////////////////////////////////////// -->
	<!-- ///////////////////////////////////////////////////////////////////////////////////////////// -->
	<!-- aop
	<aop:aspectj-autoproxy />
 
	<bean id="controllerAop" class="com.kanq.train.aop.ControllerAOP" />
	
	<aop:config>
		<aop:aspect id="myAop" ref="controllerAop">
			<aop:pointcut id="target" expression="execution(public com.kanq.ResponseBean *(..))" />
			     <aop:before method="checkValidity" pointcut-ref="target" /> 
				 <aop:after  method="addLog" pointcut-ref="target" />  
			<aop:around method="handlerControllerMethod" pointcut-ref="target" />
		</aop:aspect>
	</aop:config>
	-->
	
	<!-- //////////////////////////////////////////////////////////////////////////////////////////// -->
	<!-- ////////////////////////////////////// coreController ////////////////////////////////////// -->
	<!-- //////////////////////////////////////////////////////////////////////////////////////////// -->
	<bean class="org.springframework.web.servlet.handler.SimpleUrlHandlerMapping">
		<property name="order" value="1"></property>
		<property name="mappings">
			<props>
				<prop key="controller/core/request.do">coreController</prop>
			</props>
		</property>
	</bean>

	<bean name="coreController" class="com.kanq.qd.use.controller.CoreController">
		<property name="visitor" ref="coreService"></property>
	</bean>
</beans>  